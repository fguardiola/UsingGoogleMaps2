@model UsingGoogleMaps2.Models.Pub

@{
    ViewBag.Title = "RegisterPub";
}

<h2>Register new Pub</h2>

<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyC_Tm0LskVQEn34c-5WTBMC4velnOZb7vQ&sensor=false"></script>

<script type="text/javascript" src="/Scripts/jquery-1.8.2.min.js"></script>
<script type="text/javascript" src="/Scripts/Maps.js"></script>

<style>
    #map_canvas img {
        max-width: none;
    }
</style>
<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>

<br />
<div id="map_canvas" style="height:600px ;"></div>
<br />
<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {
    @*<script>
        var geocoder;
        var map;
        $(document).ready(function () {
         
            initialize();

        });

        function initialize() {
          
            $("#submit_button").attr('disabled', 'disabled');
            document.getElementById("submit_button").disabled = true;
            $('input[type=submit]', this).attr('disabled', 'disabled');
            $("#checkBox").prop("checked", false);
            geocoder = new google.maps.Geocoder();
            var latlng = new google.maps.LatLng(53.350073, -6.261553);
            var mapOptions = {
                zoom: 13,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
        }

        function codeAddress() {
            var address = document.getElementById("address").value;
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);
                    // set longitude and latitude in format (latitude,longitude) ex-> (53.3835946, -6.24807850000002)
                    document.getElementById('latLng').value = results[0].geometry.location;


                    var marker = new google.maps.Marker({
                        map: map,
                        position: results[0].geometry.location
                    });
                    //enable submit button

                } else {
                    alert("Geocode was not successful for the following reason: " + status);
                }
            });
        }
    </script>*@
}




@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Pub</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Category)
        </div>
        <div class="editor-field">
            @Html.DropDownList("Category")
            @Html.ValidationMessageFor(model => model.Category)
        </div>

        

        <div class="editor-label">
            @Html.LabelFor(model => model.Area)
        </div>
        <div class="editor-field">
            @Html.DropDownList("Area")
            @Html.ValidationMessageFor(model => model.Area)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Address)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Address, new { id = "address" })<input  type="button" value="Check address on map" onclick="codeAddress()">
            @Html.ValidationMessageFor(model => model.Address)
        </div>
        <div>@Html.HiddenFor(model => model.LatLng, new { id = "latLng" })</div>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.DistanceTillAreaCenter)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DistanceTillAreaCenter)
            @Html.ValidationMessageFor(model => model.DistanceTillAreaCenter)
        </div>*@

        <div class="editor-label">
            @Html.LabelFor(model => model.ContactEmail)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ContactEmail)
            @Html.ValidationMessageFor(model => model.ContactEmail)
        </div>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.NegotiatedPercentage)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.NegotiatedPercentage)
            @Html.ValidationMessageFor(model => model.NegotiatedPercentage)
        </div>*@

        <p>
            
            <input id="submit_button" type="submit"  value=" register" />
            @*<input type="checkbox" id="checkBox" name="option1" value="Milk">*@
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to Home", "Index","Home")
</div>

